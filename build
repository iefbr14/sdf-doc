#!/usr/bin/perl -w
#
# >>Title::     Build Documentation
#
# >>Copyright::
# Copyright (c) 1992-1996, Ian Clatworthy (ianc@mincom.com).
# You may distribute under the terms specified in the LICENSE file.
#
# >>History::
# -----------------------------------------------------------------------
# Date      Who     Change
# 30-Oct-98 ianc    Added local mode
# 29-Feb-96 ianc    SDF 2.000
# -----------------------------------------------------------------------
#

=head1 NAME

=head1 USAGE

=head1 REQUIRED ARGUMENTS

=head1 OPTION

=head1 DESCRIPTION

=head1 DIAGNOSTICS

=head1 EXIT STATUS

=head1 CONFIGURATION

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

=head1 LICENSE COPYRIGHT

=cut

use strict;
use warnings;
use Getopt::Std;

sub usage {
	die <<"EOF";
Usage: $0 [options...] [args]...
   -- build the hmtl tree 
Options:
   -x     -- turn Debugging on.
   -F     -- Force build 
   -O :   -- Set target build directory (default html)
Notes:
   By default: build those files have changed relative to main docs.
EOF
}

my(%Opt);
getopts('xO:', \%Opt) || usage;

my($Debug) = $Opt{x} || 0;
my($Html)  = $Opt{O} || 'html';

use Cwd;
use File::Path;

require "sdf/name.pl";

# The root directory for documents
my $DOC_ROOT = cwd();

# The formats to build for each document
my %FMTS = (
    "paper/sdfintro",   ['pdf', 'html'],
    "quickref/qr_sdf",  ['pdf', 'html'],
    "user/ug_sdf",      ['book -zpdf', 'topics'],
    "guru/gg_sdf",      ['book -zpdf', 'topics'],
    "ref/re_sdf",       ['book -zpdf', 'topics'],
    "genhtml/index",    ['pdf', 'html'],
    "podusers/index",   ['pdf', 'html'],
    "release/rn_sdf",   ['pdf', 'topics'],
    "faq/faq",          ['pdf', 'html'],
);

# Symbolic names for sets of documents
my %TAGS = (
    "all",      [sort keys %FMTS],
    "local",    [home => [ 'html'], 'catalog' => ['html']],
);

# Check the usage
unless (@ARGV) {
    print "usage: build all          - all the documents\n";
    print "       build list_of_docs - some documents\n";
    print "       build local        - just home & catalog for local use\n";
    print "       build pdf          - pdf docs\n";
    exit 1;
}

$Html = "$DOC_ROOT/$Html" unless substr($Html, 0, 1) eq '/';
mkpath($Html, 1, 0755);

# Check for local mode
if ($ARGV[0] eq 'local') {
	prep('home', 'catalog');
	exit();
}

my $PDF = 0;

if ($ARGV[0] eq 'pdf') {
	shift @ARGV;
	$PDF = 1;
}

# Generate the documents
my($doc);
while (defined($doc = shift @ARGV)) {
    # Expand symbolic names
    if ($TAGS{$doc}) {
        unshift(@ARGV, @{$TAGS{$doc}});
        next;
    }

    # Get the formats to generate for this document
    unless (defined $FMTS{$doc}) {
        print "error: unknown document '$doc'\n";
        next;
    }
    my @fmts = @{$FMTS{$doc}};

    # Change to the directory holding the document
    my($dir, $file) = &NameSplit($doc);
    chdir "$DOC_ROOT/$dir";
    print "CHANGED TO: ", `pwd`;

    # Generate the required outputs
    for my $fmt (@fmts) {
	next if ($PDF == 0 && $fmt eq 'book -zpdf');
	next if ($PDF == 0 && $fmt eq 'pdf');
	next if ($PDF == 0 && $fmt eq 'ps');

	mkpath("$Html/$dir", 1, 0755);
	my($cmd) = "sdf -O'$Html/$dir' -2$fmt $file";
        print "EXECUTING: $cmd\n";
        system($cmd);
    }

	chdir $DOC_ROOT;

	#### BUG IN sdf -O , html files are left in source direcctory)
	for my $fook (<$dir/*.html>) {
		my($new) = $fook; $new =~ s=.*/=$Html/$dir/=;
print "fook $fook => $new\n";
		rename($fook, $new);
	}
	if (-f "$Html/$dir/$file.html") {
		symlink("$file.html", "$Html/$dir/index.html");
	}
}

sub prep {
	my(@docs) = @_;

	my($cmd) = "sdf -O'$Html' -2html -DLOCAL_DOCS @docs";
	print "EXECUTING: $cmd\n";
	system($cmd);

	for my $doc (@docs) {
		if ($doc eq 'home') {
			symlink("$doc.html", "$Html/index.html");
		}
	}
}

# Update the home page, document catalog and INSTALL notes
chdir $DOC_ROOT;
prep(qw(home catalog));

print "EXECUTING: sdf -2txt -o- -csdf user/in_insta.sdf > INSTALL\n";
system("sdf -2txt -o- -csdf user/in_insta.sdf > INSTALL");

system("cp --recursive images html/");
